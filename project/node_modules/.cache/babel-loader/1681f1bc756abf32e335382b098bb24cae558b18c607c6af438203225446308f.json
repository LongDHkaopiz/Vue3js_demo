{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_USER } from '../common/contants';\nexport default {\n  name: \"UserForm\",\n  data() {\n    return {\n      user: {\n        name: \"\",\n        email: \"\",\n        password: \"\"\n      },\n      errors: {\n        name: \"\",\n        email: \"\",\n        password: \"\"\n      }\n    };\n  },\n  created() {\n    let userId = this.$route.params.id;\n    if (userId) {\n      this.getUser(userId);\n    }\n  },\n  methods: {\n    validate() {\n      let isValid = true;\n      this.errors = {\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        image: \"\"\n      };\n      if (!this.user.name) {\n        this.errors.name = 'User name is required';\n        isValid = false;\n      } else if (!this.user.email) {\n        this.errors.email = 'User email is required';\n        isValid = false;\n      } else if (!this.user.password) {\n        this.errors.password = 'User password is required';\n        isValid = false;\n      }\n      return isValid;\n    },\n    save() {\n      if (this.validate()) {\n        if (this.user.id) {\n          this.$request.put(API_USER + `/${this.user.id}`, this.user).then(res => {\n            if (res.data.success) {\n              this.$router.push({\n                name: 'user.list'\n              });\n              return;\n            }\n            alert('Something went wrong');\n          });\n        } else {\n          this.$request.post(API_USER, this.user).then(res => {\n            if (res.data.success) {\n              this.$router.push({\n                name: 'user.list'\n              });\n              return;\n            }\n            alert('Something went wrong');\n          });\n        }\n      }\n    },\n    getUser(Userid) {\n      this.$request.get(API_USER + `/${Userid}`).then(result => {\n        this.user = result.data;\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    cancel() {\n      this.user = {\n        name: \"\",\n        email: \"\",\n        password: \"\"\n      };\n    }\n  }\n};","map":{"version":3,"names":["API_USER","name","data","user","email","password","errors","created","userId","$route","params","id","getUser","methods","validate","isValid","price","description","image","save","$request","put","then","res","success","$router","push","alert","post","Userid","get","result","catch","err","cancel"],"sources":["/home/longdh@kaopiz.local/Music/vueMiniProject/miniproject/src/views/admin/users/Formuser.vue"],"sourcesContent":["<template>\n    <div class=\"user-info\">\n        <div class=\"princing-header px-3 py-3 pt-md-3 pb-md-4 mx-auto text-center\">\n            <h3 class=\"display-4\">Create New User</h3>\n        </div>\n        <div class=\"container\">\n            <form @submit.prevent=\"save()\">\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\">Email</label>\n                    <div class=\"col-sm-9\">\n                        <input type=\"email\" v-model=\"user.email\" @blur=\"validate()\" class=\"form-control\" />\n                    </div>\n                </div>\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\">Name</label>\n                    <div class=\"col-sm-9\">\n                        <input type=\"text\" class=\"form-control\" v-model=\"user.name\" @blur=\"validate()\" />\n                    </div>\n                </div>\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\">Password</label>\n                    <div class=\"col-sm-9\">\n                        <input type=\"password\"  class=\"form-control\" minlength=\"8\" v-model=\"user.password\"\n                            @blur=\"validate()\" required />\n                    </div>\n                </div>\n                <div class=\"form-item row py-3\">\n                   <label for=\"input\" class=\"col-sm-3 col-form-label\">Role</label>\n                   <div class=\"col-sm-9\">\n                        <select v-model=\"user.role\" @blur=\"validate()\" class=\"form-control\">\n                            <option disabled value=\"\">Please select one</option>\n                            <option>admin</option>\n                            <option>user</option>\n                        </select>\n                   </div>\n                    \n                </div>\n    \n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\"></label>\n                    <div class=\"col-sm-9\">\n                        <button type=\"submit\" class=\"btn btn-primary mx-3 \">Save</button>\n                        <button type=\"reset\" class=\"btn btn-danger mx-3 \">Cancel</button>\n                        <button class=\"btn btn-secondary mx-3\">\n                            <router-link to=\"/admin/users\" class=\"text-white\">Back</router-link>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</template>\n<script>\nimport { API_USER } from '../common/contants'\nexport default {\n    name: \"UserForm\",\n    data() {\n        return {\n            user: {\n                name: \"\",\n                email: \"\",\n                password: \"\",\n            },\n            errors: {\n                name: \"\",\n                email: \"\",\n                password: \"\",\n            }\n        }\n    },\n    created() {\n        let userId = this.$route.params.id\n        if (userId) {\n            this.getUser(userId)\n        }\n    },\n    methods: {\n        validate() {\n            let isValid = true\n            this.errors = {\n                name: \"\",\n                price: \"\",\n                description: \"\",\n                image: \"\"\n            }\n            if (!this.user.name) {\n                this.errors.name = 'User name is required'\n                isValid = false\n            }else if (!this.user.email) {\n                this.errors.email = 'User email is required'\n                isValid = false\n            }else if (!this.user.password) {\n                this.errors.password = 'User password is required'\n                isValid = false\n            }\n            return isValid\n        },\n        save() {\n            if (this.validate()) {\n                if (this.user.id) {\n                    this.$request.put(API_USER + `/${this.user.id}`, this.user).then(\n                        res => {\n                            if (res.data.success) {\n                                this.$router.push({\n                                    name: 'user.list'\n                                })\n                                return\n                            }\n                            alert('Something went wrong')\n                        }\n                    )\n                } else {\n                    this.$request.post(API_USER, this.user).then(\n                        res => {\n                            if (res.data.success) {\n                                this.$router.push({\n                                    name: 'user.list'\n                                })\n                                return\n                            }\n                            alert('Something went wrong')\n                        }\n                    )\n               }\n            }\n        },\n        getUser(Userid) {\n            this.$request.get(API_USER + `/${Userid}`).then((result) => {\n                this.user = result.data\n            }).catch((err) => {\n                alert(err)\n            });\n        },\n        cancel() {\n            this.user = {\n                name: \"\",\n                email: \"\",\n                password: \"\",\n            }\n        }\n    }\n\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}