{"ast":null,"code":"import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line, Bar, Doughnut } from 'vue-chartjs';\nimport dashboard from './Sidebar.vue';\n// import weatherChart from '../common/weather_chart'\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend);\nexport default {\n  name: 'dashboard.weather',\n  data() {\n    return {\n      weather: {},\n      searchCountry: '',\n      searchOption: '',\n      forecastday: [],\n      hours: {},\n      temp_c_values: '',\n      temp_f_values: '',\n      hourArray: '',\n      chartData: null,\n      options: null\n    };\n  },\n  components: {\n    dashboard,\n    Line,\n    Bar\n  },\n  methods: {\n    async getWeather() {\n      var API_PERSON_KEY = `607d30125c34472888023252233105`;\n      var API_WEATHER = `http://api.weatherapi.com/v1/${this.searchOption}?key=${API_PERSON_KEY}&q=${this.searchCountry}&aqi=no`;\n      try {\n        const response = await fetch(API_WEATHER);\n        if (response.status === 200) {\n          this.weather = await response.json();\n          if (this.searchOption === 'forecast.json') {\n            this.forecastday = this.weather.forecast.forecastday;\n            this.forecastday.forEach(element => {\n              this.hours = element.hour;\n            });\n            this.temp_c_values = this.hours.map(item => item.temp_c);\n            this.temp_f_values = this.hours.map(item => item.temp_f);\n            let time_values = this.hours.map(item => item.time);\n            this.hourArray = time_values.map(time => {\n              const date = new Date(time);\n              return date.getHours();\n            });\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  },\n  async mounted() {\n    var API_PERSON_KEY = `607d30125c34472888023252233105`;\n    var API_WEATHER = `http://api.weatherapi.com/v1/${this.searchOption}?key=${API_PERSON_KEY}&q=${this.searchCountry}&aqi=no`;\n    try {\n      const response = await fetch(API_WEATHER);\n      if (response.status === 200) {\n        this.weather = await response.json();\n        if (this.searchOption === 'forecast.json') {\n          this.forecastday = this.weather.forecast.forecastday;\n          this.forecastday.forEach(element => {\n            this.hours = element.hour;\n          });\n          this.temp_c_values = this.hours.map(item => item.temp_c);\n          this.temp_f_values = this.hours.map(item => item.temp_f);\n          let time_values = this.hours.map(item => item.time);\n          this.hourArray = time_values.map(time => {\n            const date = new Date(time);\n            return date.getHours();\n          });\n          this.chartData = {\n            labels: this.hourArray,\n            datasets: [{\n              label: \"Celsius temperature\",\n              data: this.temp_c_values,\n              backgroundColor: \"rgba(244, 231, 4, 0.8)\",\n              borderColor: \"#f4e704cc\",\n              borderWidth: 2\n            }, {\n              label: \"Fahrenheit temperature \",\n              data: this.temp_f_values,\n              backgroundColor: \"rgba(71, 183,132,.5)\",\n              borderColor: \"#47b784\",\n              borderWidth: 2\n            }]\n          }, this.options = {\n            responsive: true,\n            lineTension: 1,\n            maintainAspectRatio: true,\n            scales: {\n              x: {\n                title: {\n                  display: true,\n                  text: 'Hours'\n                },\n                ticks: {\n                  beginAtZero: true,\n                  padding: 0\n                },\n                Width: 600\n              },\n              y: {\n                title: {\n                  display: true,\n                  text: 'Temperature'\n                },\n                min: 0,\n                max: 150,\n                ticks: {\n                  stepSize: 10,\n                  padding: 0\n                }\n              }\n            }\n          };\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  created() {\n    this.getWeather();\n    const weatherChart = {};\n  }\n};","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","Line","Bar","Doughnut","dashboard","register","name","data","weather","searchCountry","searchOption","forecastday","hours","temp_c_values","temp_f_values","hourArray","chartData","options","components","methods","getWeather","API_PERSON_KEY","API_WEATHER","response","fetch","status","json","forecast","forEach","element","hour","map","item","temp_c","temp_f","time_values","time","date","Date","getHours","e","console","log","mounted","labels","datasets","label","backgroundColor","borderColor","borderWidth","responsive","lineTension","maintainAspectRatio","scales","x","title","display","text","ticks","beginAtZero","padding","Width","y","min","max","stepSize","created","weatherChart"],"sources":["/home/longdh@kaopiz.local/Music/vueMiniProject/miniproject/src/views/admin/authors/Weather.vue"],"sourcesContent":["<template>\n    <div class=\" d-flex\">\n        <dashboard></dashboard>\n        <div class=\"container weather-today\" style=\"margin-top: 70px;\">\n            <el-form :inline=\"true\" class=\"demo-form-inline\">\n                <el-form-item label=\"Location by\">\n                    <el-input v-model=\"searchCountry\" placeholder=\"Location by\" />\n                </el-form-item>\n                <el-form-item label=\"Option by\">\n                    <el-select v-model=\"searchOption\" class=\"m-2\" placeholder=\"Select\" size=\"small\" label=\"Option\">\n                        <el-option label=\"current\" value=\"current.json\" />\n                        <el-option label=\"forecast\" value=\"forecast.json\" />\n                    </el-select>\n                </el-form-item>\n                <el-form-item>\n                    <el-button type=\"primary\" @click=\"getWeather()\">Query</el-button>\n                </el-form-item>\n            </el-form>\n            <div class=\"content-weather d-flex \">\n                <div class=\"info-content\">\n                    <div class=\"content\">\n                        <span class=\"name_provide\">\n                            Province / City: {{ weather && weather.location && weather.location.name }}\n                        </span>\n                        <span class=\"country\">\n                            Country: {{ weather && weather.location && weather.location.country }}\n                        </span>\n                        <span class=\"tz_id\">\n                            Time Zone: {{ weather && weather.location && weather.location.tz_id }}\n                        </span>\n                        <span class=\"last_updated\">\n                            Last updated: {{ weather && weather.current && weather.current.last_updated }}\n                        </span>\n                    </div>\n                </div>\n                <div class=\"icon-content\">\n                    <img :src=\"weather && weather.current && weather.current.condition.icon\" style=\"width: 100px;\">\n                    <div class=\"content\">\n                        <span class=\"text\">\n                            {{ weather && weather.current && weather.current.condition.text }}\n                        </span>\n                        <span class=\"tempC\">\n                            {{ weather && weather.current && weather.current.temp_c }}&deg;C\n                        </span>\n                        <span class=\"tempF\">\n                            {{ weather && weather.current && weather.current.temp_f }}&deg;F\n                        </span>\n                    </div>\n                </div>\n                <!-- {{ weather && weather.current && weather.current.condition.icon }} -->\n            </div>\n            <div class=\"detail-info\">\n                <h3>Detailed forecast information</h3>\n                <div class=\"detail-info__inner d-flex\">\n                    <div class=\"detail-info__inner-left d-flex\">\n                        <span>Wind speed in miles per hour: {{ weather && weather.current && weather.current.wind_mph\n                        }}</span>\n                        <span>Wind speed in kilometer per hour: {{ weather && weather.current && weather.current.wind_kph\n                        }}</span>\n                        <span>Wind direction in degrees: {{ weather && weather.current && weather.current.wind_degree\n                        }}</span>\n                        <span>Wind gust in miles per hour: {{ weather && weather.current && weather.current.gust_mph\n                        }}</span>\n                        <span>Wind gust in kilometer per hour: {{ weather && weather.current && weather.current.gust_kph\n                        }}</span>\n                    </div>\n                    <div class=\"detail-info__inner-right d-flex\">\n                        <span>UV Index: {{ weather && weather.current && weather.current.uv }}</span>\n                        <span>Pressure in millibars: {{ weather && weather.current && weather.current.pressure_mb }}</span>\n                        <span>Pressure in inches: {{ weather && weather.current && weather.current.pressure_in }}</span>\n                        <span>Precipitation amount in inches: {{ weather && weather.current && weather.current.precip_in\n                        }}</span>\n                    </div>\n                </div>\n            </div>\n            <div class=\"chart-info__forecast\" v-show=\"searchOption === 'forecast.json'\">\n                <h3 class=\"title-chart__weather\">\n                    Real time temperature chart\n                </h3>\n                <Bar :data=\"chartData\" :options=\"options\" style=\"width:600px;\" />\n            </div>\n        </div>\n    </div>\n</template>\n<script>\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    BarElement,\n    ArcElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\nimport { Line, Bar, Doughnut } from 'vue-chartjs'\nimport dashboard from './Sidebar.vue'\n// import weatherChart from '../common/weather_chart'\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    BarElement,\n    ArcElement,\n    Title,\n    Tooltip,\n    Legend\n)\n\nexport default {\n    name: 'dashboard.weather',\n    data() {\n        return {\n            weather: {},\n            searchCountry: '',\n            searchOption: '',\n            forecastday: [],\n            hours: {},\n            temp_c_values: '',\n            temp_f_values: '',\n            hourArray: '',\n            chartData: null,\n            options:null\n        }\n    },\n    components: {\n        dashboard,\n        Line,\n        Bar\n    },\n    methods: {\n        async getWeather() {\n            var API_PERSON_KEY = `607d30125c34472888023252233105`\n            var API_WEATHER = `http://api.weatherapi.com/v1/${this.searchOption}?key=${API_PERSON_KEY}&q=${this.searchCountry}&aqi=no`\n\n            try {\n                const response = await fetch(API_WEATHER);\n                if (response.status === 200) {\n                    this.weather = await response.json()\n                    if (this.searchOption === 'forecast.json') {\n                        this.forecastday = this.weather.forecast.forecastday\n                        this.forecastday.forEach(element => {\n                            this.hours = element.hour\n                        })\n                        this.temp_c_values = this.hours.map(item => item.temp_c);\n                        this.temp_f_values = this.hours.map(item => item.temp_f);\n                        let time_values = this.hours.map(item => item.time);\n                        this.hourArray = time_values.map(time => {\n                            const date = new Date(time);\n                            return date.getHours();\n                        });\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n            }\n        }\n    },\n    async mounted() {\n        var API_PERSON_KEY = `607d30125c34472888023252233105`\n            var API_WEATHER = `http://api.weatherapi.com/v1/${this.searchOption}?key=${API_PERSON_KEY}&q=${this.searchCountry}&aqi=no`\n\n            try {\n                const response = await fetch(API_WEATHER);\n                if (response.status === 200) {\n                    this.weather = await response.json()\n                    if (this.searchOption === 'forecast.json') {\n                        this.forecastday = this.weather.forecast.forecastday\n                        this.forecastday.forEach(element => {\n                            this.hours = element.hour\n                        })\n                        this.temp_c_values = this.hours.map(item => item.temp_c);\n                        this.temp_f_values = this.hours.map(item => item.temp_f);\n                        let time_values = this.hours.map(item => item.time);\n                        this.hourArray = time_values.map(time => {\n                            const date = new Date(time);\n                            return date.getHours();\n                        });\n                        this.chartData = {\n                            labels: this.hourArray,\n                                datasets: [\n                                    {\n                                        label: \"Celsius temperature\",\n                                        data: this.temp_c_values,\n                                        backgroundColor: \"rgba(244, 231, 4, 0.8)\",\n                                        borderColor: \"#f4e704cc\",\n                                        borderWidth: 2,\n\n                                    },\n                                    {\n                                        label: \"Fahrenheit temperature \",\n                                        data: this.temp_f_values,\n                                        backgroundColor: \"rgba(71, 183,132,.5)\",\n                                        borderColor: \"#47b784\",\n                                        borderWidth: 2,\n\n                                    }\n                                ]\n                        },\n                        this.options = {\n                            responsive: true,\n                                lineTension: 1,\n                                    maintainAspectRatio: true,\n                                        scales: {\n                                x: {\n                                    title: {\n                                        display: true,\n                                            text: 'Hours'\n                                    },\n                                    ticks: {\n                                        beginAtZero: true,\n                                            padding: 0,\n                            },\n                                    Width: 600\n                                },\n                                y: {\n                                    title: {\n                                        display: true,\n                                            text: 'Temperature'\n                                    },\n                                    min: 0,\n                                        max: 150,\n                                            ticks: {\n                                        stepSize: 10,\n                                            padding: 0,\n                            },\n\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (e) {\n                console.log(e);\n            }\n    },\n    created() {\n        this.getWeather()\n        const weatherChart = {\n           \n        }\n    },\n\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}