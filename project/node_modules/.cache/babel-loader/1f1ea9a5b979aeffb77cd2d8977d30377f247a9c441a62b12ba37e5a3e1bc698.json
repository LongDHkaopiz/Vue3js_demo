{"ast":null,"code":"import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, vShow as _vShow, normalizeClass as _normalizeClass, withDirectives as _withDirectives, toDisplayString as _toDisplayString, withModifiers as _withModifiers, createElementVNode as _createElementVNode, Transition as _Transition, createTextVNode as _createTextVNode, TransitionGroup as _TransitionGroup } from \"vue\";\nconst _hoisted_1 = {\n  class: \"vfc-popover-container\",\n  ref: \"popoverElement\",\n  tabindex: \"0\"\n};\nconst _hoisted_2 = {\n  key: 1,\n  class: \"vfc-calendars-container\"\n};\nconst _hoisted_3 = {\n  class: \"vfc-calendars\",\n  ref: \"calendars\"\n};\nconst _hoisted_4 = {\n  class: \"vfc-content\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  class: \"vfc-dayNames\"\n};\nconst _hoisted_8 = {\n  key: 0\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"rangeCleaner\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PickerInputs = _resolveComponent(\"PickerInputs\");\n  const _component_time_picker = _resolveComponent(\"time-picker\");\n  const _component_Arrows = _resolveComponent(\"Arrows\");\n  const _component_month_year_picker = _resolveComponent(\"month-year-picker\");\n  const _component_WeekNumbers = _resolveComponent(\"WeekNumbers\");\n  const _component_Day = _resolveComponent(\"Day\");\n  const _component_Footer = _resolveComponent(\"Footer\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_PickerInputs, {\n    fConfigs: _ctx.fConfigs,\n    singleSelectedDate: $options.singleSelectedDate,\n    calendar: _ctx.calendar\n  }, {\n    dateRangeInputs: _withCtx(props => [_renderSlot(_ctx.$slots, \"dateRangeInputs\", {\n      startDate: props.startDate,\n      endDate: props.endDate,\n      isTypeable: _ctx.fConfigs.isTypeable\n    })]),\n    datePickerInput: _withCtx(props => [_renderSlot(_ctx.$slots, \"datePickerInput\", {\n      selectedDate: props.selectedDate,\n      isTypeable: _ctx.fConfigs.isTypeable\n    })]),\n    _: 3 /* FORWARDED */\n  }, 8 /* PROPS */, [\"fConfigs\", \"singleSelectedDate\", \"calendar\"]), _withDirectives(_createElementVNode(\"div\", {\n    class: _normalizeClass([\"vfc-main-container\", {\n      'vfc-modal': _ctx.fConfigs.isModal && (_ctx.fConfigs.isDatePicker || _ctx.fConfigs.isDateRange || _ctx.fConfigs.isMultipleDatePicker),\n      'vfc-dark': _ctx.fConfigs.isDark\n    }]),\n    ref: \"mainContainer\"\n  }, [_ctx.showTimePicker ? (_openBlock(), _createBlock(_component_time_picker, {\n    key: 0,\n    ref: \"timePicker\",\n    height: _ctx.$refs.popoverElement.clientHeight,\n    hours: _ctx.activeHours,\n    minutes: _ctx.activeMinutes\n  }, null, 8 /* PROPS */, [\"height\", \"hours\", \"minutes\"])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_Arrows, {\n    isMultiple: false,\n    fConfigs: _ctx.fConfigs,\n    allowPreDate: _ctx.allowPreDate,\n    allowNextDate: _ctx.allowNextDate\n  }, {\n    navigationArrowLeft: _withCtx(() => [_renderSlot(_ctx.$slots, \"navigationArrowLeft\")]),\n    navigationArrowRight: _withCtx(() => [_renderSlot(_ctx.$slots, \"navigationArrowRight\")]),\n    _: 3 /* FORWARDED */\n  }, 8 /* PROPS */, [\"fConfigs\", \"allowPreDate\", \"allowNextDate\"]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.listCalendars, (calendarItem, key) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"vfc-calendar\",\n      key: calendarItem.key\n    }, [_withDirectives(_createVNode(_component_month_year_picker, {\n      ref_for: true,\n      ref: \"monthContainer\",\n      class: _normalizeClass('vfc-' + _ctx.fConfigs.titlePosition),\n      changeYearStep: _ctx.changeYearStep,\n      \"calendar-key\": key\n    }, null, 8 /* PROPS */, [\"class\", \"changeYearStep\", \"calendar-key\"]), [[_vShow, _ctx.showMonthPicker === key + 1 || _ctx.showYearPicker === key + 1]]), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_Arrows, {\n      isMultiple: true,\n      fConfigs: _ctx.fConfigs,\n      allowPreDate: _ctx.allowPreDate,\n      allowNextDate: _ctx.allowNextDate,\n      \"calendar-key\": key\n    }, {\n      navigationArrowLeft: _withCtx(() => [_renderSlot(_ctx.$slots, \"navigationArrowLeft\")]),\n      navigationArrowRight: _withCtx(() => [_renderSlot(_ctx.$slots, \"navigationArrowRight\")]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"fConfigs\", \"allowPreDate\", \"allowNextDate\", \"calendar-key\"]), _createVNode(_Transition, {\n      tag: \"div\",\n      name: $options.getTransition_(),\n      appear: \"\"\n    }, {\n      default: _withCtx(() => [$options.checkHiddenElement('month') ? (_openBlock(), _createElementBlock(\"div\", {\n        key: 0,\n        class: _normalizeClass([\"vfc-top-date\", 'vfc-' + _ctx.fConfigs.titlePosition])\n      }, [_createElementVNode(\"span\", {\n        onClick: _withModifiers($event => $options.isNotSeparatelyAndFirst(key) && $options.openMonthPicker(key + 1), [\"prevent\"]),\n        class: _normalizeClass({\n          'vfc-cursor-pointer vfc-underline': _ctx.fConfigs.changeMonthFunction && $options.isNotSeparatelyAndFirst(key),\n          'vfc-underline-active': _ctx.showMonthPicker === key + 1\n        })\n      }, _toDisplayString(calendarItem.month), 11 /* TEXT, CLASS, PROPS */, _hoisted_5), _createElementVNode(\"span\", {\n        onClick: _withModifiers($event => $options.isNotSeparatelyAndFirst(key) && $options.openYearPicker(key + 1), [\"prevent\"]),\n        class: _normalizeClass({\n          'vfc-cursor-pointer vfc-underline': _ctx.fConfigs.changeYearFunction && $options.isNotSeparatelyAndFirst(key),\n          'vfc-underline-active': _ctx.showYearPicker === key + 1\n        })\n      }, _toDisplayString(calendarItem.year), 11 /* TEXT, CLASS, PROPS */, _hoisted_6)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"name\"]), _createVNode(_Transition, {\n      tag: \"div\",\n      name: $options.getTransition_(),\n      appear: \"\"\n    }, {\n      default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_7, [_ctx.fConfigs.showWeekNumbers ? (_openBlock(), _createElementBlock(\"span\", _hoisted_8)) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.fConfigs.dayNames, (dayName, dayKey) => {\n        return _openBlock(), _createElementBlock(\"span\", {\n          key: key + dayKey + 1,\n          class: \"vfc-day\"\n        }, [$options.checkHiddenElement('dayNames') ? (_openBlock(), _createElementBlock(_Fragment, {\n          key: 0\n        }, [_createTextVNode(_toDisplayString(dayName), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)]);\n      }), 128 /* KEYED_FRAGMENT */))])]),\n\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"name\"]), _createVNode(_TransitionGroup, {\n      tag: \"div\",\n      name: $options.getTransition_(),\n      appear: \"\"\n    }, {\n      default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(calendarItem.weeks, (week, week_key) => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          class: \"vfc-week\",\n          key: key + week_key + 1\n        }, [_ctx.showWeekNumbers ? (_openBlock(), _createBlock(_component_WeekNumbers, {\n          key: 0,\n          number: week.number,\n          borderColor: _ctx.borderColor\n        }, null, 8 /* PROPS */, [\"number\", \"borderColor\"])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(week.days, (day, day_key) => {\n          return _openBlock(), _createBlock(_component_Day, {\n            ref_for: true,\n            ref: \"day\",\n            key: key + week_key + day_key + 1,\n            isMultipleDateRange: _ctx.isMultipleDateRange,\n            day: day,\n            fConfigs: _ctx.fConfigs,\n            calendar: _ctx.calendar,\n            helpCalendar: $options.helpCalendar,\n            week: week,\n            day_key: day_key,\n            onDayMouseOver: $options.dayMouseOver,\n            alwaysUseDefaultClasses: _ctx.alwaysUseDefaultClasses\n          }, {\n            default: _withCtx(props => [_renderSlot(_ctx.$slots, \"default\", {\n              week: props.week,\n              day: props.day\n            })]),\n            _: 2 /* DYNAMIC */\n          }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"isMultipleDateRange\", \"day\", \"fConfigs\", \"calendar\", \"helpCalendar\", \"week\", \"day_key\", \"onDayMouseOver\", \"alwaysUseDefaultClasses\"]);\n        }), 128 /* KEYED_FRAGMENT */))]);\n      }), 128 /* KEYED_FRAGMENT */)), calendarItem.weeks.length < 6 && !_ctx.fConfigs.isLayoutExpandable ? (_openBlock(), _createElementBlock(_Fragment, {\n        key: 0\n      }, [_createCommentVNode(\" stabilizator \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(6 - calendarItem.weeks.length, moreWeekKey => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          style: {\n            \"height\": \"32.6px\"\n          },\n          key: key + moreWeekKey + 'moreWeek'\n        }, \" Â  \");\n      }), 128 /* KEYED_FRAGMENT */))], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"name\"])])]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _ctx.canClearRange || _ctx.$slots['footer'] ? (_openBlock(), _createBlock(_component_Footer, {\n    key: 0\n  }, {\n    footer: _withCtx(() => [_createElementVNode(\"div\", {\n      onClick: _cache[1] || (_cache[1] = (...args) => $options.cleanRange && $options.cleanRange(...args))\n    }, [_renderSlot(_ctx.$slots, \"cleaner\", {}, () => [_ctx.canClearRange && _ctx.fConfigs.isDateRange ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"span\", {\n      class: _normalizeClass([$options.rangeIsSelected ? 'active' : 'disabled']),\n      onClick: _cache[0] || (_cache[0] = (...args) => $options.cleanRange && $options.cleanRange(...args))\n    }, \"Clear Range\" + _toDisplayString(_ctx.isMultipleDateRange && 's'), 3 /* TEXT, CLASS */)])) : _createCommentVNode(\"v-if\", true)])]), _renderSlot(_ctx.$slots, \"footer\")]),\n    _: 3 /* FORWARDED */\n  })) : _createCommentVNode(\"v-if\", true)]))], 2 /* CLASS */), [[_vShow, _ctx.showCalendar]])], 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","tabindex","_createElementBlock","_hoisted_1","_createVNode","_component_PickerInputs","fConfigs","_ctx","singleSelectedDate","$options","calendar","dateRangeInputs","_withCtx","props","_renderSlot","$slots","startDate","endDate","isTypeable","datePickerInput","selectedDate","_createElementVNode","_normalizeClass","isModal","isDatePicker","isDateRange","isMultipleDatePicker","isDark","showTimePicker","_createBlock","_component_time_picker","height","$refs","popoverElement","clientHeight","hours","activeHours","minutes","activeMinutes","_hoisted_2","_component_Arrows","isMultiple","allowPreDate","allowNextDate","navigationArrowLeft","navigationArrowRight","_hoisted_3","_Fragment","_renderList","listCalendars","calendarItem","key","_component_month_year_picker","titlePosition","changeYearStep","showMonthPicker","showYearPicker","_hoisted_4","_Transition","tag","name","getTransition_","appear","checkHiddenElement","onClick","_withModifiers","$event","isNotSeparatelyAndFirst","openMonthPicker","changeMonthFunction","month","_hoisted_5","openYearPicker","changeYearFunction","year","_hoisted_6","_hoisted_7","showWeekNumbers","_hoisted_8","dayNames","dayName","dayKey","_TransitionGroup","weeks","week","week_key","_component_WeekNumbers","number","borderColor","days","day","day_key","_component_Day","isMultipleDateRange","helpCalendar","onDayMouseOver","dayMouseOver","alwaysUseDefaultClasses","default","length","isLayoutExpandable","_createCommentVNode","moreWeekKey","style","canClearRange","_component_Footer","footer","_cache","args","cleanRange","_hoisted_9","rangeIsSelected","_toDisplayString","showCalendar"],"sources":["/home/longdh@kaopiz.local/Music/vueMiniProject/miniproject/node_modules/vue-functional-calendar/src/components/FunctionalCalendar.vue"],"sourcesContent":["<template>\n  <div class=\"vfc-popover-container\" ref=\"popoverElement\" tabindex=\"0\">\n    <PickerInputs\n      :fConfigs=\"fConfigs\"\n      :singleSelectedDate=\"singleSelectedDate\"\n      :calendar=\"calendar\"\n    >\n      <template v-slot:dateRangeInputs=\"props\">\n        <slot\n          :startDate=\"props.startDate\"\n          :endDate=\"props.endDate\"\n          :isTypeable=\"fConfigs.isTypeable\"\n          name=\"dateRangeInputs\"\n        >\n        </slot>\n      </template>\n      <template v-slot:datePickerInput=\"props\">\n        <slot\n          :selectedDate=\"props.selectedDate\"\n          :isTypeable=\"fConfigs.isTypeable\"\n          name=\"datePickerInput\"\n        >\n        </slot>\n      </template>\n    </PickerInputs>\n\n    <div\n      class=\"vfc-main-container\"\n      v-show=\"showCalendar\"\n      ref=\"mainContainer\"\n      :class=\"{\n        'vfc-modal':\n          fConfigs.isModal &&\n          (fConfigs.isDatePicker ||\n            fConfigs.isDateRange ||\n            fConfigs.isMultipleDatePicker),\n        'vfc-dark': fConfigs.isDark\n      }\"\n    >\n      <time-picker\n        v-if=\"showTimePicker\"\n        ref=\"timePicker\"\n        :height=\"$refs.popoverElement.clientHeight\"\n        :hours=\"activeHours\"\n        :minutes=\"activeMinutes\"\n      ></time-picker>\n\n      <template v-else>\n        <div class=\"vfc-calendars-container\">\n          <Arrows\n            :isMultiple=\"false\"\n            :fConfigs=\"fConfigs\"\n            :allowPreDate=\"allowPreDate\"\n            :allowNextDate=\"allowNextDate\"\n          >\n            <template v-slot:navigationArrowLeft>\n              <slot name=\"navigationArrowLeft\"></slot>\n            </template>\n            <template v-slot:navigationArrowRight>\n              <slot name=\"navigationArrowRight\"></slot>\n            </template>\n          </Arrows>\n\n          <div class=\"vfc-calendars\" ref=\"calendars\">\n            <div\n              class=\"vfc-calendar\"\n              v-for=\"(calendarItem, key) in listCalendars\"\n              :key=\"calendarItem.key\"\n            >\n              <month-year-picker\n                ref=\"monthContainer\"\n                :class=\"'vfc-' + fConfigs.titlePosition\"\n                :changeYearStep=\"changeYearStep\"\n                v-show=\"\n                  showMonthPicker === key + 1 || showYearPicker === key + 1\n                \"\n                :calendar-key=\"key\"\n              >\n              </month-year-picker>\n              <div class=\"vfc-content\">\n                <Arrows\n                  :isMultiple=\"true\"\n                  :fConfigs=\"fConfigs\"\n                  :allowPreDate=\"allowPreDate\"\n                  :allowNextDate=\"allowNextDate\"\n                  :calendar-key=\"key\"\n                >\n                  <template v-slot:navigationArrowLeft>\n                    <slot name=\"navigationArrowLeft\"></slot>\n                  </template>\n                  <template v-slot:navigationArrowRight>\n                    <slot name=\"navigationArrowRight\"></slot>\n                  </template>\n                </Arrows>\n\n                <transition tag=\"div\" :name=\"getTransition_()\" appear>\n                  <div\n                    class=\"vfc-top-date\"\n                    :class=\"'vfc-' + fConfigs.titlePosition\"\n                    v-if=\"checkHiddenElement('month')\"\n                  >\n                    <span\n                      @click.prevent=\"\n                        isNotSeparatelyAndFirst(key) && openMonthPicker(key + 1)\n                      \"\n                      :class=\"{\n                        'vfc-cursor-pointer vfc-underline':\n                          fConfigs.changeMonthFunction &&\n                          isNotSeparatelyAndFirst(key),\n                        'vfc-underline-active': showMonthPicker === key + 1\n                      }\"\n                    >\n                      {{ calendarItem.month }}</span\n                    >\n                    <span\n                      @click.prevent=\"\n                        isNotSeparatelyAndFirst(key) && openYearPicker(key + 1)\n                      \"\n                      :class=\"{\n                        'vfc-cursor-pointer vfc-underline':\n                          fConfigs.changeYearFunction &&\n                          isNotSeparatelyAndFirst(key),\n                        'vfc-underline-active': showYearPicker === key + 1\n                      }\"\n                    >\n                      {{ calendarItem.year }}\n                    </span>\n                  </div>\n                </transition>\n                <transition tag=\"div\" :name=\"getTransition_()\" appear>\n                  <div class=\"vfc-dayNames\">\n                    <span v-if=\"fConfigs.showWeekNumbers\"></span>\n                    <span\n                      v-for=\"(dayName, dayKey) in fConfigs.dayNames\"\n                      :key=\"key + dayKey + 1\"\n                      class=\"vfc-day\"\n                    >\n                      <template v-if=\"checkHiddenElement('dayNames')\">\n                        {{ dayName }}\n                      </template>\n                    </span>\n                  </div>\n                </transition>\n                <transition-group tag=\"div\" :name=\"getTransition_()\" appear>\n                  <div\n                    class=\"vfc-week\"\n                    v-for=\"(week, week_key) in calendarItem.weeks\"\n                    :key=\"key + week_key + 1\"\n                  >\n                    <WeekNumbers\n                      v-if=\"showWeekNumbers\"\n                      :number=\"week.number\"\n                      :borderColor=\"borderColor\"\n                    />\n                    <Day\n                      v-for=\"(day, day_key) in week.days\"\n                      ref=\"day\"\n                      :key=\"key + week_key + day_key + 1\"\n                      :isMultipleDateRange=\"isMultipleDateRange\"\n                      :day=\"day\"\n                      :fConfigs=\"fConfigs\"\n                      :calendar=\"calendar\"\n                      :helpCalendar=\"helpCalendar\"\n                      :week=\"week\"\n                      :day_key=\"day_key\"\n                      @dayMouseOver=\"dayMouseOver\"\n                      :alwaysUseDefaultClasses=\"alwaysUseDefaultClasses\"\n                    >\n                      <template v-slot:default=\"props\">\n                        <slot :week=\"props.week\" :day=\"props.day\"></slot>\n                      </template>\n                    </Day>\n                  </div>\n                  <template\n                    v-if=\"\n                      calendarItem.weeks.length < 6 &&\n                        !fConfigs.isLayoutExpandable\n                    \"\n                  >\n                    <!-- stabilizator -->\n                    <div\n                      style=\"height: 32.6px\"\n                      v-for=\"moreWeekKey in 6 - calendarItem.weeks.length\"\n                      :key=\"key + moreWeekKey + 'moreWeek'\"\n                    >\n                      &nbsp;\n                    </div>\n                  </template>\n                </transition-group>\n              </div>\n            </div>\n          </div>\n          <Footer v-if=\"canClearRange || $slots['footer']\">\n            <template v-slot:footer>\n              <div @click=\"cleanRange\">\n                <slot name=\"cleaner\">\n                  <div\n                    v-if=\"canClearRange && fConfigs.isDateRange\"\n                    class=\"rangeCleaner\"\n                  >\n                    <span\n                      :class=\"[rangeIsSelected ? 'active' : 'disabled']\"\n                      @click=\"cleanRange\"\n                      >Clear Range{{ isMultipleDateRange && 's' }}</span\n                    >\n                  </div>\n                </slot>\n              </div>\n              <slot name=\"footer\"></slot>\n            </template>\n            <!-- <span>&nbsp;</span> -->\n          </Footer>\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport helpCalendarClass from '../assets/js/helpCalendar'\nimport { propsAndData } from '../mixins/propsAndData'\nimport TimePicker from '../components/TimePicker.vue'\nimport Arrows from '../components/Arrows.vue'\nimport WeekNumbers from '../components/WeekNumbers.vue'\nimport Day from '../components/Day.vue'\nimport MonthYearPicker from '../components/MonthYearPicker.vue'\nimport PickerInputs from '../components/PickerInputs.vue'\nimport Footer from '../components/Footer.vue'\n\nimport { hElContains, hUniqueID } from '../utils/helpers'\n// import calendarMethods from '../utils/calendarMethods'\n\nexport default {\n  name: 'FunctionalCalendar',\n  components: {\n    MonthYearPicker,\n    TimePicker,\n    PickerInputs,\n    Arrows,\n    Footer,\n    Day,\n    WeekNumbers\n  },\n  mixins: [propsAndData],\n  computed: {\n    startDMY() {\n      //start only with Day Month and Year\n      if (this.calendar.dateRange.start) {\n        return this.calendar.dateRange.start.split(' ')[0]\n      }\n      return ''\n    },\n    endDMY() {\n      //end only with Day Month and Year\n      if (this.calendar.dateRange.end) {\n        return this.calendar.dateRange.end.split(' ')[0]\n      }\n      return ''\n    },\n    rangeIsSelected() {\n      if (!this.isMultipleDateRange)\n        return !!(this.calendar.dateRange.end && this.calendar.dateRange.start)\n      return this.calendar.multipleDateRange.length > 0\n    },\n    helpCalendar() {\n      return new helpCalendarClass(\n        this.fConfigs.sundayStart,\n        this.checkHiddenElement('leftAndRightDays'),\n        this.fConfigs.dateFormat,\n        this.fConfigs.dayNames\n      )\n    },\n    singleSelectedDate: {\n      get() {\n        let res = ''\n        if (this.displayTimeInput) {\n          const validFormats = [\n            'HH:MM',\n            'HH:mm',\n            'hh:MM',\n            'hh:mm',\n            'MM:HH',\n            'mm:HH',\n            'MM:hh',\n            'mm:hh'\n          ]\n          let format = this.fConfigs.dateFormat\n          if (this.dateFormat) {\n            format = this.dateFormat\n          }\n          if (validFormats.indexOf(format.split(' ')[1]) > 3) {\n            res +=\n              ' ' +\n              [this.calendar.selectedHour, this.calendar.selectedMinute]\n                .reverse()\n                .join(':')\n          } else {\n            res +=\n              ' ' +\n              [this.calendar.selectedHour, this.calendar.selectedMinute].join(\n                ':'\n              )\n          }\n        }\n\n        return this.calendar.selectedDate\n          ? this.calendar.selectedDate + res\n          : ''\n      },\n      set(newValue) {\n        newValue = this.helpCalendar.mask(newValue)\n        if (this.helpCalendar.getDateFromFormat(newValue).getMonth()) {\n          this.calendar.selectedDate = newValue\n        }\n      }\n    }\n  },\n  created() {\n    this.setConfigs()\n    this.initCalendar()\n  },\n  mounted() {\n    //show time placeholder\n    if (this.displayTimeInput) {\n      const timeFormat = this.fConfigs.placeholder.split(' ')[1]\n      if (!timeFormat) {\n        this.fConfigs.placeholder += ' hh:mm'\n      }\n    }\n\n    this.popoverElement = this.$refs.popoverElement\n    // Event\n    this.popoverElement.addEventListener('focusin', this.onFocusIn)\n    this.popoverElement.addEventListener('focusout', this.onFocusOut)\n    window.addEventListener('click', this.hideMonthYearPicker, {\n      capture: true\n    })\n\n    // Reacts to external selected dates\n    this.$watch(\n      'value',\n      function(value) {\n        if (\n          typeof value === 'object' &&\n          (value.hasOwnProperty('dateRange') ||\n            value.hasOwnProperty('selectedDate'))\n        ) {\n          this.calendar = value\n        } else if (\n          typeof value === 'object' &&\n          value.hasOwnProperty('multipleDateRange')\n        ) {\n          this.calendar.multipleDateRange = value.multipleDateRange\n          const lastElement = this.calendar.multipleDateRange[\n            Math.max(0, this.calendar.multipleDateRange.length - 1)\n          ]\n          if (\n            lastElement &&\n            ((lastElement.start && !lastElement.end) ||\n              (!lastElement.start && lastElement.end))\n          ) {\n            throw new Error('Invalid Data Range')\n          }\n        }\n      },\n      { immediate: true, deep: true }\n    )\n\n    this.$watch(\n      'showCalendar',\n      function(value) {\n        if (value) this.$emit('opened')\n        else this.$emit('closed')\n      },\n      { immediate: true, deep: true }\n    )\n  },\n  beforeDestroy: function() {\n    window.removeEventListener('focusin', this.onFocusIn)\n    window.removeEventListener('focusout', this.onFocusOut)\n    window.removeEventListener('click', this.hideMonthYearPicker)\n  },\n  watch: {\n    enabledDates: {\n      handler() {\n        this.fConfigs.enabledDates = this.enabledDates;\n      },\n      deep: true\n    },\n    'configs.enabledDates': {\n      handler() {\n        this.fConfigs.enabledDates = this.configs.enabledDates;\n      },\n      deep: true\n    },\n    fConfigs: {\n      handler() {\n        this.markChooseDays()\n      },\n      deep: true,\n      immediate: true\n    },\n    calendar: {\n      handler() {\n        this.markChooseDays()\n      },\n      deep: true,\n      immediate: true\n    },\n    'calendar.currentDate': {\n      handler(value) {\n        this.$emit('input', this.calendar)\n        this.checkLimits(value)\n      }\n    }\n  },\n  methods: {\n    initCalendar() {\n      this.setCalendarData()\n      this.listRendering()\n      this.markChooseDays()\n      this.checkLimits(this.calendar.currentDate)\n    },\n    updateCalendar() {\n      this.setExistingCalendarData()\n      this.listRendering()\n      this.markChooseDays()\n    },\n    isNotSeparatelyAndFirst(key) {\n      return this.isSeparately || key == 0\n    },\n    setCalendarData() {\n      let date = this.calendar.currentDate\n      date = new Date(date.getFullYear(), date.getMonth() - 1)\n\n      this.listCalendars = []\n\n      for (let i = 0; i < this.fConfigs.calendarsCount; i++) {\n        date = new Date(date.getFullYear(), date.getMonth() + 1)\n\n        let calendar = {\n          key: i + hUniqueID(),\n          date: date,\n          dateTop: `${\n            this.fConfigs.monthNames[date.getMonth()]\n          } ${date.getFullYear()}`,\n          month: this.fConfigs.monthNames[date.getMonth()],\n          year: date.getFullYear(),\n          weeks: this.helpCalendar.getFinalizedWeeks(\n            date.getMonth(),\n            date.getFullYear()\n          )\n        }\n\n        this.listCalendars.push(calendar)\n\n        if (!this.fConfigs.isMultiple) {\n          break\n        }\n      }\n    },\n    setExistingCalendarData() {\n      for (let i = 0; i < this.listCalendars.length; i++) {\n        let calendar = this.listCalendars[i]\n        let date = calendar.date\n\n        this.$set(this.listCalendars, i, {\n          key: calendar.key,\n          date: date,\n          dateTop: `${\n            this.fConfigs.monthNames[date.getMonth()]\n          } ${date.getFullYear()}`,\n          month: this.fConfigs.monthNames[date.getMonth()],\n          year: date.getFullYear(),\n          weeks: this.helpCalendar.getFinalizedWeeks(\n            date.getMonth(),\n            date.getFullYear()\n          )\n        })\n\n        if (!this.fConfigs.isMultiple) {\n          break\n        }\n      }\n    },\n    setConfigs() {\n      let globalOptions\n      if (typeof this.$getOptions !== 'undefined') {\n        // Global Options\n        globalOptions = this.$getOptions()\n        Object.keys(globalOptions).forEach(objectKey => {\n          if (typeof this.fConfigs[objectKey] !== 'undefined') {\n            this.$set(this.fConfigs, objectKey, globalOptions[objectKey])\n          }\n        })\n      }\n\n      if (typeof this.configs !== 'undefined') {\n        Object.keys(this.fConfigs).forEach(objectKey => {\n          if (typeof this.configs[objectKey] !== 'undefined') {\n            // Get From Configs\n            this.$set(this.fConfigs, objectKey, this.configs[objectKey])\n          }\n        })\n      } else {\n        Object.keys(this.$props).forEach(objectKey => {\n          if (\n            typeof this.fConfigs[objectKey] !== 'undefined' &&\n            typeof this.$props[objectKey] !== 'undefined'\n          ) {\n            this.$set(this.fConfigs, objectKey, this.$props[objectKey])\n          }\n        })\n      }\n\n      // Is Modal\n      if (this.fConfigs.isModal) this.showCalendar = false\n\n      // Placeholder\n      if (!this.fConfigs.placeholder)\n        this.fConfigs.placeholder = this.fConfigs.dateFormat\n\n      if (typeof this.newCurrentDate !== 'undefined') {\n        this.calendar.currentDate = this.newCurrentDate\n      }\n\n      // Sunday Start\n      if (this.fConfigs.sundayStart) {\n        let dayNames = [...this.fConfigs.dayNames]\n        let sundayName = dayNames[dayNames.length - 1]\n        dayNames.splice(dayNames.length - 1, 1)\n        dayNames.unshift(sundayName)\n        this.fConfigs.dayNames = dayNames\n      }\n    },\n    listRendering() {\n      // Each Calendars\n      this.listCalendars.forEach(calendar => {\n        // Set Calendar Weeks\n        calendar.weeks.forEach(week => {\n          let finalizedDays = []\n\n          week.days.forEach(day => {\n            let date = new Date(day.year, day.month, day.day)\n            let now = new Date()\n\n            let isToday = false\n\n            date.setHours(0, 0, 0, 0)\n            now.setHours(0, 0, 0, 0)\n\n            if (date.getTime() === now.getTime()) {\n              isToday = true\n            }\n\n            let checkMarked\n            // With Custom Classes\n            if (typeof this.fConfigs.markedDates[0] === 'object') {\n              checkMarked = this.fConfigs.markedDates.find(markDate => {\n                return markDate.date === this.helpCalendar.formatDate(date)\n              })\n            } else {\n              // Without Classes\n              checkMarked = this.fConfigs.markedDates.find(markDate => {\n                return markDate === this.helpCalendar.formatDate(date)\n              })\n            }\n\n            if (this.startDMY === this.helpCalendar.formatDate(date)) {\n              checkMarked = true\n            }\n\n            let isMarked = false\n            if (typeof checkMarked !== 'undefined') {\n              isMarked = true\n            }\n\n            finalizedDays.push({\n              day: day.day,\n              date: this.helpCalendar.formatDate(date),\n              hide: day.hide,\n              isMouseToLeft: false,\n              isMouseToRight: false,\n              isHovered: false,\n              isDateRangeStart: this.checkDateRangeStart(\n                this.helpCalendar.formatDate(date)\n              ),\n              isDateRangeEnd: this.checkDateRangeEnd(\n                this.helpCalendar.formatDate(date)\n              ),\n              hideLeftAndRightDays: day.hideLeftAndRightDays,\n              isToday,\n              isMarked\n            })\n          })\n\n          week.days = finalizedDays\n        })\n      })\n    },\n    clickDay(item, isDisabledDate) {\n      if (this.fConfigs.withTimePicker && this.fConfigs.isDateRange) {\n        item.date = item.date + ' 00:00'\n      }\n      this.$emit('dayClicked', item)\n\n      if (\n        !this.fConfigs.isDateRange &&\n        !this.fConfigs.isDatePicker &&\n        !this.fConfigs.isMultipleDatePicker\n      ) {\n        return false\n      }\n\n      //Disabled Dates - Start\n\n      // Disable days of week if set in configuration\n      let dateDay = this.helpCalendar.getDateFromFormat(item.date).getDay() - 1\n      if (dateDay === -1) {\n        dateDay = 6\n      }\n\n      let dayOfWeekString = this.fConfigs.dayNames[dateDay]\n      if (\n        this.fConfigs.disabledDayNames.includes(dayOfWeekString) ||\n        isDisabledDate(item.date)\n      ) {\n        return false\n      }\n\n      //Disabled Dates - End\n\n      // Limits\n      if (this.fConfigs.limits) {\n        let min = this.helpCalendar\n          .getDateFromFormat(this.fConfigs.limits.min)\n          .getTime()\n        let max = this.helpCalendar\n          .getDateFromFormat(this.fConfigs.limits.max)\n          .getTime()\n        let date = this.helpCalendar.getDateFromFormat(item.date).getTime()\n\n        if (date < min || date > max) {\n          return false\n        }\n      }\n\n      // Date Multiple Range\n      if (this.fConfigs.isMultipleDateRange) {\n        let clickDate = this.helpCalendar\n          .getDateFromFormat(item.date.split(' ')[0])\n          .getTime()\n        let rangesLength = this.calendar.multipleDateRange.length\n        let lastRange = this.calendar.multipleDateRange[rangesLength - 1]\n        let startDate = ''\n        // if (lastRange) {\n        //   // if (lastRange.start && lastRange.end)\n        // } else\n\n        if (!lastRange) {\n          this.calendar.multipleDateRange.push({ end: '', start: '' })\n          rangesLength = this.calendar.multipleDateRange.length\n          lastRange = this.calendar.multipleDateRange[rangesLength - 1]\n        }\n\n        if (lastRange.start) {\n          startDate = this.helpCalendar.getDateFromFormat(lastRange.start)\n        }\n\n        // Two dates is not empty\n        if (lastRange.start !== '' && lastRange.end !== '') {\n          this.calendar.multipleDateRange.push({ end: '', start: item.date })\n          // lastRange.start = item.date\n          // lastRange.end = ''\n          // Not date selected\n        } else if (lastRange.start === '' && lastRange.end === '') {\n          lastRange.start = item.date\n          // Start Date not empty, chose date > start date\n        } else if (lastRange.end === '' && clickDate > startDate.getTime()) {\n          lastRange.end = item.date\n          // Start date not empty, chose date <= start date (also same date range select)\n        } else if (lastRange.start !== '' && clickDate <= startDate.getTime()) {\n          this.$nextTick(() => {\n            if (this.calendar.withTimePicker) {\n              this.$refs['timePicker'].startDateActive = true\n            }\n          })\n          lastRange.end = lastRange.start\n          lastRange.start = item.date\n        }\n\n        //Get number of days between date range dates\n        if (lastRange.start !== '' && lastRange.end !== '') {\n          let oneDay = 24 * 60 * 60 * 1000\n          let firstDate = this.helpCalendar.getDateFromFormat(lastRange.start)\n          let secondDate = this.helpCalendar.getDateFromFormat(lastRange.end)\n          let diffDays = Math.round(\n            Math.abs((firstDate.getTime() - secondDate.getTime()) / oneDay)\n          )\n          let itemTime = this.helpCalendar\n            .getDateFromFormat(item.date)\n            .getTime()\n\n          this.$emit('selectedDaysCount', diffDays)\n\n          // Is Auto Closeable\n          if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\n            this.showCalendar = false\n          }\n\n          // Minimum Selected Days\n          let minSelDays = this.fConfigs.minSelDays\n\n          if (\n            minSelDays &&\n            itemTime >= startDate.getTime() &&\n            diffDays < minSelDays\n          ) {\n            startDate.setDate(startDate.getDate() + (minSelDays - 1))\n            lastRange.end = this.helpCalendar.formatDate(startDate)\n          }\n\n          if (\n            minSelDays &&\n            itemTime < startDate.getTime() &&\n            diffDays < minSelDays\n          ) {\n            startDate.setDate(startDate.getDate() - (minSelDays - 1))\n            lastRange.start = this.helpCalendar.formatDate(startDate)\n          }\n\n          // Maximum Selected Days\n          let maxSelDays = this.fConfigs.maxSelDays\n\n          if (\n            maxSelDays &&\n            itemTime >= startDate.getTime() &&\n            diffDays >= maxSelDays\n          ) {\n            startDate.setDate(startDate.getDate() + (maxSelDays - 1))\n            lastRange.end = this.helpCalendar.formatDate(startDate)\n          }\n\n          if (\n            maxSelDays &&\n            itemTime < startDate.getTime() &&\n            diffDays >= maxSelDays\n          ) {\n            startDate.setDate(startDate.getDate() - (maxSelDays - 1))\n            lastRange.start = this.helpCalendar.formatDate(startDate)\n          }\n        }\n\n        this.$emit('input', this.calendar)\n      } // Date Range\n      else if (this.fConfigs.isDateRange) {\n        let clickDate = this.helpCalendar\n          .getDateFromFormat(item.date.split(' ')[0])\n          .getTime()\n\n        let startDate = ''\n        if (this.calendar.dateRange.start) {\n          startDate = this.helpCalendar.getDateFromFormat(\n            this.calendar.dateRange.start\n          )\n        }\n\n        // Two dates is not empty\n        if (\n          this.calendar.dateRange.start !== '' &&\n          this.calendar.dateRange.end !== ''\n        ) {\n          this.calendar.dateRange.start = item.date\n          this.calendar.dateRange.end = ''\n          // Not date selected\n        } else if (\n          this.calendar.dateRange.start === '' &&\n          this.calendar.dateRange.end === ''\n        ) {\n          this.calendar.dateRange.start = item.date\n          // Start Date not empty, chose date > start date\n        } else if (\n          this.calendar.dateRange.end === '' &&\n          clickDate > startDate.getTime()\n        ) {\n          this.calendar.dateRange.end = item.date\n          // Start date not empty, chose date <= start date (also same date range select)\n        } else if (\n          this.calendar.dateRange.start !== '' &&\n          clickDate <= startDate.getTime()\n        ) {\n          this.$nextTick(() => {\n            if (this.calendar.dateRange && this.calendar.withTimePicker) {\n              this.$refs['timePicker'].startDateActive = true\n            }\n          })\n          this.calendar.dateRange.end = this.calendar.dateRange.start\n          this.calendar.dateRange.start = item.date\n        }\n\n        //Get number of days between date range dates\n        if (\n          this.calendar.dateRange.start !== '' &&\n          this.calendar.dateRange.end !== ''\n        ) {\n          let oneDay = 24 * 60 * 60 * 1000\n          let firstDate = this.helpCalendar.getDateFromFormat(\n            this.calendar.dateRange.start\n          )\n          let secondDate = this.helpCalendar.getDateFromFormat(\n            this.calendar.dateRange.end\n          )\n          let diffDays = Math.round(\n            Math.abs((firstDate.getTime() - secondDate.getTime()) / oneDay)\n          )\n          let itemTime = this.helpCalendar\n            .getDateFromFormat(item.date)\n            .getTime()\n\n          this.$emit('selectedDaysCount', diffDays)\n\n          // Is Auto Closeable\n          if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\n            this.showCalendar = false\n          }\n\n          // Minimum Selected Days\n          let minSelDays = this.fConfigs.minSelDays\n\n          if (\n            minSelDays &&\n            itemTime >= startDate.getTime() &&\n            diffDays < minSelDays\n          ) {\n            startDate.setDate(startDate.getDate() + (minSelDays - 1))\n            this.calendar.dateRange.end = this.helpCalendar.formatDate(\n              startDate\n            )\n          }\n\n          if (\n            minSelDays &&\n            itemTime < startDate.getTime() &&\n            diffDays < minSelDays\n          ) {\n            startDate.setDate(startDate.getDate() - (minSelDays - 1))\n            this.calendar.dateRange.start = this.helpCalendar.formatDate(\n              startDate\n            )\n          }\n\n          // Maximum Selected Days\n          let maxSelDays = this.fConfigs.maxSelDays\n\n          if (\n            maxSelDays &&\n            itemTime >= startDate.getTime() &&\n            diffDays >= maxSelDays\n          ) {\n            startDate.setDate(startDate.getDate() + (maxSelDays - 1))\n            this.calendar.dateRange.end = this.helpCalendar.formatDate(\n              startDate\n            )\n          }\n\n          if (\n            maxSelDays &&\n            itemTime < startDate.getTime() &&\n            diffDays >= maxSelDays\n          ) {\n            startDate.setDate(startDate.getDate() - (maxSelDays - 1))\n            this.calendar.dateRange.start = this.helpCalendar.formatDate(\n              startDate\n            )\n          }\n        }\n\n        this.$emit('input', this.calendar)\n      } else if (this.fConfigs.isDatePicker) {\n        this.calendar.selectedDate = item.date\n        this.$emit('input', this.calendar)\n\n        // Is Auto Closeable\n        if (this.fConfigs.isModal && this.fConfigs.isAutoCloseable) {\n          this.showCalendar = false\n        }\n      } else if (this.fConfigs.isMultipleDatePicker) {\n        if (\n          this.calendar.hasOwnProperty('selectedDates') &&\n          this.calendar.selectedDates.find(date => date.date === item.date)\n        ) {\n          let dateIndex = this.calendar.selectedDates.findIndex(\n            date => date.date === item.date\n          )\n          this.calendar.selectedDates.splice(dateIndex, 1)\n        } else {\n          let date = Object.assign({}, this.defaultDateFormat)\n          date.date = item.date\n\n          if (!this.calendar.hasOwnProperty('selectedDates')) {\n            this.calendar.selectedDates = []\n          }\n\n          this.calendar.selectedDates.push(date)\n        }\n\n        this.$emit('input', this.calendar)\n      }\n\n      this.markChooseDays()\n\n      // Time Picker\n      if (this.fConfigs.withTimePicker) {\n        if (this.fConfigs.isDateRange || this.fConfigs.isDatePicker) {\n          this.openTimePicker()\n        }\n\n        if (\n          this.calendar.selectedDates.find(date => date.date === item.date) &&\n          this.fConfigs.isMultipleDatePicker\n        ) {\n          this.openTimePicker()\n        }\n      }\n\n      this.$emit('choseDay', item)\n    },\n    markChooseDays() {\n      let startDate = this.startDMY\n      let endDate = this.endDMY\n      this.listCalendars.forEach(calendar => {\n        calendar.weeks.forEach(week => {\n          week.days.forEach(day => {\n            day.isMarked = false\n            day.date = day.date.split(' ')[0]\n            // Date Picker\n            if (this.fConfigs.isDatePicker) {\n              if (this.calendar.selectedDate === day.date) day.isMarked = true\n            } else if (this.fConfigs.isMultipleDatePicker) {\n              if (\n                this.calendar.hasOwnProperty('selectedDates') &&\n                this.calendar.selectedDates.find(date => date.date === day.date)\n              )\n                day.isMarked = true\n            } else {\n              day.isMouseToLeft = false\n              day.isMouseToRight = false\n              // Date Range\n              if (startDate === day.date) {\n                day.isMouseToLeft = !!endDate\n                day.isMarked = true\n              }\n\n              if (endDate === day.date) {\n                day.isMouseToRight = !!endDate\n                day.isMarked = true\n              }\n              //Multiple Range\n              if (this.calendar.multipleDateRange) {\n                if (\n                  ~this.calendar.multipleDateRange\n                    .map(range => range.start.split(' ')[0])\n                    .indexOf(day.date)\n                ) {\n                  day.isMouseToLeft = !!endDate\n                  day.isMarked = true\n                }\n                if (\n                  ~this.calendar.multipleDateRange\n                    .map(range => range.end.split(' ')[0])\n                    .indexOf(day.date)\n                ) {\n                  day.isMouseToRight = !!endDate\n                  day.isMarked = true\n                }\n                this.calendar.multipleDateRange.forEach(range => {\n                  if (range.start && range.start === range.end) {\n                    day.isMouseToLeft = false\n                    day.isMouseToRight = false\n                  }\n                  if (range.start && range.end) {\n                    if (\n                      this.helpCalendar.getDateFromFormat(day.date).getTime() >\n                        this.helpCalendar.getDateFromFormat(range.start) &&\n                      this.helpCalendar.getDateFromFormat(day.date) <\n                        this.helpCalendar.getDateFromFormat(range.end)\n                    ) {\n                      day.isMarked = true\n                    }\n                  }\n                })\n              }\n\n              if (startDate && startDate === endDate) {\n                day.isMouseToLeft = false\n                day.isMouseToRight = false\n              }\n              if (startDate && endDate) {\n                if (\n                  this.helpCalendar.getDateFromFormat(day.date).getTime() >\n                    this.helpCalendar.getDateFromFormat(startDate) &&\n                  this.helpCalendar.getDateFromFormat(day.date) <\n                    this.helpCalendar.getDateFromFormat(endDate)\n                ) {\n                  day.isMarked = true\n                }\n              }\n            }\n            if (this.fConfigs.markedDates.includes(day.date))\n              day.isMarked = true\n          })\n        })\n      })\n    },\n    dayMouseOver(date) {\n      this.$emit('dayMouseOver', date)\n\n      if (!this.fConfigs.isDateRange) {\n        return false\n      }\n\n      // Limits\n      if (this.fConfigs.limits) {\n        let limitMin = this.helpCalendar\n          .getDateFromFormat(this.fConfigs.limits.min)\n          .getTime()\n        let limitMax = this.helpCalendar\n          .getDateFromFormat(this.fConfigs.limits.max)\n          .getTime()\n        let limitDate = this.helpCalendar.getDateFromFormat(date).getTime()\n\n        if (limitDate < limitMin || limitDate > limitMax) {\n          return false\n        }\n      }\n\n      //Multiple Range\n\n      if (\n        (this.calendar.dateRange.start === '' ||\n          this.calendar.dateRange.end === '') &&\n        (this.calendar.dateRange.start !== '' ||\n          this.calendar.dateRange.end !== '')\n      ) {\n        for (let e = 0; e < this.listCalendars.length; e++) {\n          let calendar = this.listCalendars[e]\n\n          for (let f = 0; f < calendar.weeks.length; f++) {\n            let week = calendar.weeks[f]\n\n            for (let i = 0; i < week.days.length; i++) {\n              let item = week.days[i]\n\n              this.listCalendars[e].weeks[f].days[i].isHovered = false\n              if (\n                item.date !== this.startDMY &&\n                !this.fConfigs.markedDates.includes(item.date)\n              ) {\n                this.listCalendars[e].weeks[f].days[i].isMarked = false\n              }\n\n              if (this.calendar.dateRange.start) {\n                let itemDate = this.helpCalendar\n                  .getDateFromFormat(item.date)\n                  .getTime()\n\n                let thisDate = this.helpCalendar\n                  .getDateFromFormat(date)\n                  .getTime()\n                let startDate = this.helpCalendar.getDateFromFormat(\n                  this.calendar.dateRange.start\n                )\n\n                this.listCalendars[e].weeks[f].days[i].isMouseToLeft =\n                  (itemDate === startDate.getTime() &&\n                    thisDate > startDate.getTime()) ||\n                  (itemDate === thisDate && thisDate < startDate.getTime())\n                this.listCalendars[e].weeks[f].days[i].isMouseToRight =\n                  (itemDate === startDate.getTime() &&\n                    thisDate < startDate.getTime()) ||\n                  (itemDate === thisDate && thisDate > startDate.getTime())\n\n                let dateDay =\n                  this.helpCalendar.getDateFromFormat(item.date).getDay() - 1\n                if (dateDay === -1) {\n                  dateDay = 6\n                }\n\n                let dayOfWeekString = this.fConfigs.dayNames[dateDay]\n                if (\n                  !this.fConfigs.disabledDayNames.includes(dayOfWeekString) &&\n                  ((itemDate > startDate.getTime() && itemDate < thisDate) ||\n                    (itemDate < startDate.getTime() && itemDate > thisDate))\n                ) {\n                  this.listCalendars[e].weeks[f].days[i].isMarked = true\n                }\n\n                if (!this.calendar.dateRange.end && itemDate === thisDate) {\n                  this.listCalendars[e].weeks[f].days[i].isHovered = false\n                }\n\n                if (\n                  this.checkSelDates(\n                    'min',\n                    this.calendar.dateRange.start,\n                    item.date,\n                    date\n                  )\n                ) {\n                  this.listCalendars[e].weeks[f].days[i].isMarked = true\n\n                  let minDateToRight, minDateToLeft\n                  minDateToLeft = new Date(startDate.getTime())\n                  minDateToRight = new Date(startDate.getTime())\n                  minDateToLeft.setDate(\n                    minDateToLeft.getDate() - this.fConfigs.minSelDays + 1\n                  )\n                  minDateToRight.setDate(\n                    minDateToRight.getDate() + this.fConfigs.minSelDays - 1\n                  )\n\n                  if (\n                    thisDate >= minDateToLeft.getTime() &&\n                    this.helpCalendar.formatDate(minDateToLeft) === item.date\n                  ) {\n                    this.listCalendars[e].weeks[f].days[i].isMarked = false\n                    this.listCalendars[e].weeks[f].days[i].isMouseToLeft = true\n                    this.listCalendars[e].weeks[f].days[i].isHovered = true\n                  } else if (\n                    thisDate <= minDateToRight.getTime() &&\n                    this.helpCalendar.formatDate(minDateToRight) === item.date\n                  ) {\n                    this.listCalendars[e].weeks[f].days[i].isMarked = false\n                    this.listCalendars[e].weeks[f].days[i].isMouseToRight = true\n                    this.listCalendars[e].weeks[f].days[i].isHovered = true\n                  }\n                }\n\n                if (\n                  this.checkSelDates(\n                    'max',\n                    this.calendar.dateRange.start,\n                    item.date,\n                    date\n                  )\n                ) {\n                  this.listCalendars[e].weeks[f].days[i].isMarked = false\n                  this.listCalendars[e].weeks[f].days[i].isHovered = false\n                  this.listCalendars[e].weeks[f].days[i].isMouseToLeft = false\n                  this.listCalendars[e].weeks[f].days[i].isMouseToRight = false\n\n                  let maxDateToLeft, maxDateToRight\n                  maxDateToLeft = new Date(startDate.getTime())\n                  maxDateToRight = new Date(startDate.getTime())\n                  maxDateToLeft.setDate(\n                    maxDateToLeft.getDate() - this.fConfigs.maxSelDays + 1\n                  )\n                  maxDateToRight.setDate(\n                    maxDateToRight.getDate() + this.fConfigs.maxSelDays - 1\n                  )\n\n                  if (thisDate <= maxDateToLeft.getTime()) {\n                    if (\n                      this.helpCalendar.formatDate(maxDateToLeft) === item.date\n                    ) {\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\n                      this.listCalendars[e].weeks[f].days[\n                        i\n                      ].isMouseToLeft = true\n                    }\n                  }\n\n                  if (thisDate >= maxDateToRight.getTime()) {\n                    if (\n                      this.helpCalendar.formatDate(maxDateToRight) === item.date\n                    ) {\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\n                      this.listCalendars[e].weeks[f].days[\n                        i\n                      ].isMouseToRight = true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (this.calendar.multipleDateRange) {\n        let range = this.calendar.multipleDateRange[\n          this.calendar.multipleDateRange.length - 1\n        ]\n        if (!range) return\n        // this.calendar.multipleDateRange.forEach((range, index) => {\n        if (\n          (range.start === '' || range.end === '') &&\n          (range.start !== '' || range.end !== '')\n        ) {\n          for (let e = 0; e < this.listCalendars.length; e++) {\n            let calendar = this.listCalendars[e]\n\n            for (let f = 0; f < calendar.weeks.length; f++) {\n              let week = calendar.weeks[f]\n\n              for (let i = 0; i < week.days.length; i++) {\n                let item = week.days[i]\n\n                this.listCalendars[e].weeks[f].days[i].isHovered = false\n                if (\n                  item.date !== this.startDMY &&\n                  !this.fConfigs.markedDates.includes(item.date)\n                ) {\n                  this.listCalendars[e].weeks[f].days[i].isMarked = false\n                }\n\n                if (range.start) {\n                  let itemDate = this.helpCalendar\n                    .getDateFromFormat(item.date)\n                    .getTime()\n\n                  let thisDate = this.helpCalendar\n                    .getDateFromFormat(date)\n                    .getTime()\n                  let startDate = this.helpCalendar.getDateFromFormat(\n                    range.start\n                  )\n\n                  this.listCalendars[e].weeks[f].days[i].isMouseToLeft =\n                    (itemDate === startDate.getTime() &&\n                      thisDate > startDate.getTime()) ||\n                    (itemDate === thisDate && thisDate < startDate.getTime())\n                  this.listCalendars[e].weeks[f].days[i].isMouseToRight =\n                    (itemDate === startDate.getTime() &&\n                      thisDate < startDate.getTime()) ||\n                    (itemDate === thisDate && thisDate > startDate.getTime())\n\n                  let dateDay =\n                    this.helpCalendar.getDateFromFormat(item.date).getDay() - 1\n                  if (dateDay === -1) {\n                    dateDay = 6\n                  }\n\n                  let dayOfWeekString = this.fConfigs.dayNames[dateDay]\n                  if (\n                    !this.fConfigs.disabledDayNames.includes(dayOfWeekString) &&\n                    ((itemDate > startDate.getTime() && itemDate < thisDate) ||\n                      (itemDate < startDate.getTime() && itemDate > thisDate))\n                  ) {\n                    this.listCalendars[e].weeks[f].days[i].isMarked = true\n                  }\n\n                  if (!range.end && itemDate === thisDate) {\n                    this.listCalendars[e].weeks[f].days[i].isHovered = false\n                  }\n\n                  if (this.checkSelDates('min', range.start, item.date, date)) {\n                    this.listCalendars[e].weeks[f].days[i].isMarked = true\n\n                    let minDateToRight, minDateToLeft\n                    minDateToLeft = new Date(startDate.getTime())\n                    minDateToRight = new Date(startDate.getTime())\n                    minDateToLeft.setDate(\n                      minDateToLeft.getDate() - this.fConfigs.minSelDays + 1\n                    )\n                    minDateToRight.setDate(\n                      minDateToRight.getDate() + this.fConfigs.minSelDays - 1\n                    )\n\n                    if (\n                      thisDate >= minDateToLeft.getTime() &&\n                      this.helpCalendar.formatDate(minDateToLeft) === item.date\n                    ) {\n                      this.listCalendars[e].weeks[f].days[i].isMarked = false\n                      this.listCalendars[e].weeks[f].days[\n                        i\n                      ].isMouseToLeft = true\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\n                    } else if (\n                      thisDate <= minDateToRight.getTime() &&\n                      this.helpCalendar.formatDate(minDateToRight) === item.date\n                    ) {\n                      this.listCalendars[e].weeks[f].days[i].isMarked = false\n                      this.listCalendars[e].weeks[f].days[\n                        i\n                      ].isMouseToRight = true\n                      this.listCalendars[e].weeks[f].days[i].isHovered = true\n                    }\n                  }\n\n                  if (this.checkSelDates('max', range.start, item.date, date)) {\n                    this.listCalendars[e].weeks[f].days[i].isMarked = false\n                    this.listCalendars[e].weeks[f].days[i].isHovered = false\n                    this.listCalendars[e].weeks[f].days[i].isMouseToLeft = false\n                    this.listCalendars[e].weeks[f].days[\n                      i\n                    ].isMouseToRight = false\n\n                    let maxDateToLeft, maxDateToRight\n                    maxDateToLeft = new Date(startDate.getTime())\n                    maxDateToRight = new Date(startDate.getTime())\n                    maxDateToLeft.setDate(\n                      maxDateToLeft.getDate() - this.fConfigs.maxSelDays + 1\n                    )\n                    maxDateToRight.setDate(\n                      maxDateToRight.getDate() + this.fConfigs.maxSelDays - 1\n                    )\n\n                    if (thisDate <= maxDateToLeft.getTime()) {\n                      if (\n                        this.helpCalendar.formatDate(maxDateToLeft) ===\n                        item.date\n                      ) {\n                        this.listCalendars[e].weeks[f].days[i].isHovered = true\n                        this.listCalendars[e].weeks[f].days[\n                          i\n                        ].isMouseToLeft = true\n                      }\n                    }\n\n                    if (thisDate >= maxDateToRight.getTime()) {\n                      if (\n                        this.helpCalendar.formatDate(maxDateToRight) ===\n                        item.date\n                      ) {\n                        this.listCalendars[e].weeks[f].days[i].isHovered = true\n                        this.listCalendars[e].weeks[f].days[\n                          i\n                        ].isMouseToRight = true\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        // })\n      }\n    },\n    /**\n     * @return {boolean}\n     */\n    PreMonth(calendarKey = null) {\n      if (!this.allowPreDate) return false\n\n      this.transitionPrefix = 'right'\n\n      let step = this.fConfigs.changeMonthStep\n\n      calendarKey = calendarKey !== null ? calendarKey : 0\n\n      let currentCalendar = this.listCalendars[calendarKey]\n      currentCalendar.date = new Date(\n        currentCalendar.date.getFullYear(),\n        currentCalendar.date.getMonth() - step\n      )\n      currentCalendar.key -= hUniqueID()\n      this.updateCalendar()\n\n      if (!this.fConfigs.isSeparately) {\n        this.calendar.currentDate = currentCalendar.date\n        this.initCalendar()\n      }\n\n      this.$emit('changedMonth', currentCalendar.date)\n    },\n    /**\n     * @return {boolean}\n     */\n    NextMonth(calendarKey = null) {\n      if (!this.allowNextDate) return false\n\n      this.transitionPrefix = 'left'\n\n      let step = this.fConfigs.changeMonthStep\n\n      calendarKey = calendarKey !== null ? calendarKey : 0\n\n      let currentCalendar = this.listCalendars[calendarKey]\n      currentCalendar.date = new Date(\n        currentCalendar.date.getFullYear(),\n        currentCalendar.date.getMonth() + step\n      )\n      currentCalendar.key += hUniqueID()\n      this.updateCalendar()\n\n      if (!this.fConfigs.isSeparately) {\n        this.calendar.currentDate = currentCalendar.date\n        this.initCalendar()\n      }\n\n      this.$emit('changedMonth', currentCalendar.date)\n    },\n    /**\n     * @return {boolean}\n     */\n    PreYear(calendarKey = null) {\n      if (!this.allowPreDate) return false\n\n      let step = this.showYearPicker ? this.fConfigs.changeYearStep : 1\n\n      calendarKey = calendarKey !== null ? calendarKey : 0\n\n      let currentCalendar = this.listCalendars[calendarKey]\n      currentCalendar.date = new Date(\n        currentCalendar.date.getFullYear() - step,\n        currentCalendar.date.getMonth()\n      )\n      this.updateCalendar()\n\n      if (!this.fConfigs.isSeparately) {\n        this.calendar.currentDate = currentCalendar.date\n        this.initCalendar()\n      }\n\n      this.$emit('changedYear', currentCalendar.date)\n    },\n    /**\n     * @return {boolean}\n     */\n    NextYear(calendarKey = null) {\n      if (!this.allowNextDate) return false\n\n      let step = this.showYearPicker ? this.fConfigs.changeYearStep : 1\n\n      calendarKey = calendarKey !== null ? calendarKey : 0\n\n      let currentCalendar = this.listCalendars[calendarKey]\n      currentCalendar.date = new Date(\n        currentCalendar.date.getFullYear() + step,\n        currentCalendar.date.getMonth()\n      )\n      this.updateCalendar()\n\n      if (!this.fConfigs.isSeparately) {\n        this.calendar.currentDate = currentCalendar.date\n        this.initCalendar()\n      }\n\n      this.$emit('changedYear', currentCalendar.date)\n    },\n    ChooseDate(date) {\n      let newDate = this.helpCalendar.getDateFromFormat(date)\n\n      if (date === 'today') {\n        newDate = new Date()\n      }\n\n      this.listCalendars[0].date = this.calendar.currentDate = newDate\n\n      this.updateCalendar()\n      this.initCalendar()\n    },\n    openMonthPicker(key) {\n      if (this.fConfigs.changeMonthFunction) {\n        this.showMonthPicker = key === this.showMonthPicker ? false : key\n        this.showYearPicker = false\n      }\n    },\n    openYearPicker(key) {\n      if (this.fConfigs.changeYearFunction) {\n        this.showYearPicker = key === this.showYearPicker ? false : key\n        this.showMonthPicker = false\n      }\n    },\n    openTimePicker() {\n      this.showTimePicker = true\n    },\n    pickMonth(key, calendarKey) {\n      this.showMonthPicker = false\n      if (!this.isSeparately) {\n        this.listCalendars.forEach((currentCalendar, index) => {\n          let date = currentCalendar.date\n          currentCalendar.date = new Date(\n            date.getFullYear(),\n            key + 1 + index,\n            0\n          )\n          currentCalendar.key += hUniqueID()\n        })\n      } else {\n        let currentCalendar = this.listCalendars[calendarKey]\n        let date = currentCalendar.date\n        currentCalendar.date = new Date(date.getFullYear(), key + 1, 0)\n        currentCalendar.key += hUniqueID()\n      }\n\n      let currentCalendar = this.listCalendars[calendarKey]\n      this.$emit('changedMonth', currentCalendar.date);\n      this.updateCalendar()\n    },\n    pickYear(year, calendarKey) {\n      this.showYearPicker = false\n      if (!this.isSeparately) {\n        this.listCalendars.forEach(currentCalendar => {\n          let date = currentCalendar.date\n          currentCalendar.date = new Date(year, date.getMonth() + 1, 0)\n          currentCalendar.key += hUniqueID()\n          this.$emit('changedYear', currentCalendar.date)\n        })\n      } else {\n        let currentCalendar = this.listCalendars[calendarKey]\n        let date = currentCalendar.date\n        currentCalendar.date = new Date(year, date.getMonth() + 1, 0)\n        currentCalendar.key += hUniqueID()\n        this.$emit('changedYear', currentCalendar.date)\n      }\n      this.updateCalendar()\n    },\n    getYearList(date, delta) {\n      let years = []\n      let year = date.getFullYear() - 4 + delta\n      for (let i = 0; i < 12; i++) {\n        let finalYear = year + i\n\n        years.push({\n          year: finalYear\n        })\n      }\n      return years\n    },\n    /**\n     * Add date to selectedDates list\n     * @param index\n     */\n    addToSelectedDates() {\n      if (this.helpCalendar.checkValidDate(this.calendar.selectedDatesItem)) {\n        let date = Object.assign({}, this.defaultDateFormat)\n        date.date = this.calendar.selectedDatesItem\n        this.calendar.selectedDates.push(date)\n        this.calendar.selectedDatesItem = ''\n        this.markChooseDays()\n      }\n    },\n    /**\n     * Remove date from selectedDates list\n     * @param index\n     */\n    removeFromSelectedDates(index) {\n      this.calendar.selectedDates.splice(index, 1)\n      this.markChooseDays()\n    },\n\n    checkDateRangeEnd(date) {\n      if (Array.isArray(this.fConfigs.markedDateRange)) {\n        return (\n          this.fConfigs.markedDateRange.findIndex(range => {\n            return range.end === date\n          }) !== -1\n        )\n      }\n\n      return date === this.fConfigs.markedDateRange.end\n    },\n    checkSelDates(type, startDate, itemDate, hoverDate) {\n      let startTime = this.helpCalendar.getDateFromFormat(startDate).getTime()\n      let itemTime = this.helpCalendar.getDateFromFormat(itemDate).getTime()\n      let hoverTime = this.helpCalendar.getDateFromFormat(hoverDate).getTime()\n\n      let days =\n        type === 'min' ? this.fConfigs.minSelDays : this.fConfigs.maxSelDays - 2\n      let minTime = days * 1000 * 60 * 60 * 24\n      let rightTime = startTime + minTime\n      let leftTime = startTime - minTime\n\n      let result\n      if (hoverTime > startTime) {\n        if (type === 'min')\n          result =\n            itemTime < rightTime &&\n            itemTime > startTime &&\n            this.fConfigs.minSelDays\n        else\n          result =\n            itemTime > rightTime &&\n            itemTime > startTime &&\n            this.fConfigs.maxSelDays\n      } else if (hoverTime < startTime) {\n        if (type === 'min')\n          result =\n            itemTime > leftTime &&\n            itemTime < startTime &&\n            this.fConfigs.minSelDays\n        else\n          result =\n            itemTime < leftTime &&\n            itemTime < startTime &&\n            this.fConfigs.maxSelDays\n      }\n\n      return result\n    },\n    checkLimits(value) {\n      if (this.fConfigs.limits) {\n        let min = new Date(\n          this.helpCalendar.getDateFromFormat(this.fConfigs.limits.min)\n        )\n        min.setDate(1)\n        min.setHours(0, 0, 0, 0)\n        let max = new Date(\n          this.helpCalendar.getDateFromFormat(this.fConfigs.limits.max)\n        )\n        max.setDate(1)\n        max.setHours(0, 0, 0, 0)\n\n        this.allowPreDate = true\n        this.allowNextDate = true\n\n        let current = new Date(value)\n        current.setDate(1)\n        current.setHours(0, 0, 0, 0)\n\n        if (current <= min) {\n          this.allowPreDate = false\n        }\n\n        if (current >= max) {\n          this.allowNextDate = false\n        }\n      }\n    },\n    getTransition_() {\n      if (!this.fConfigs.transition) return ''\n\n      let name = ''\n      if (this.transitionPrefix === 'left') {\n        name = 'vfc-calendar-slide-left'\n      } else if (this.transitionPrefix === 'right') {\n        name = 'vfc-calendar-slide-right'\n      }\n      return name\n    },\n    checkHiddenElement(elementName) {\n      return !this.fConfigs.hiddenElements.includes(elementName)\n    },\n    onFocusIn() {\n      if (this.fConfigs.isModal) {\n        this.showCalendar = true\n      }\n    },\n    onFocusOut(e) {\n      if (\n        this.fConfigs.isModal &&\n        !hElContains(this.popoverElement, e.relatedTarget)\n      ) {\n        return (this.showCalendar = this.showMonthPicker = this.showYearPicker = false)\n      }\n    },\n\n    hideMonthYearPicker(e) {\n      this.$nextTick(() => {\n        if (this.showMonthPicker || this.showYearPicker) {\n          let key = this.showMonthPicker\n            ? this.showMonthPicker - 1\n            : this.showYearPicker - 1\n\n          const MYactive = this.$refs.calendars.querySelectorAll(\n            `.vfc-content-MY-picker`\n          )[key]\n          if (MYactive.contains(e.target)) {\n            return\n          }\n          return (this.showMonthPicker = this.showYearPicker = false)\n        }\n      })\n    },\n\n    checkDateRangeStart(date) {\n      if (Array.isArray(this.fConfigs.markedDateRange)) {\n        return (\n          this.fConfigs.markedDateRange.findIndex(range => {\n            return range.start === date\n          }) !== -1\n        )\n      }\n\n      return date === this.fConfigs.markedDateRange.start\n    },\n    cleanRange() {\n      if (!this.isMultipleDateRange) {\n        this.calendar.dateRange.end = ''\n        this.calendar.dateRange.start = ''\n        return\n      }\n      this.calendar.multipleDateRange = []\n      // this.calendar.multipleDateRange.push({\n      //   start: '',\n      //   end: ''\n      // })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../assets/scss/calendar.scss';\n.rangeCleaner {\n  padding: 5px 0 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  span {\n    color: white;\n    border-radius: 5px;\n    border: none;\n    padding: 5px;\n    &.active {\n      &:hover {\n        background-color: #4f8a9e;\n        cursor: pointer;\n      }\n      background-color: #66b3cc;\n    }\n    &.disabled {\n      background-color: rgb(148, 148, 148);\n    }\n  }\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}