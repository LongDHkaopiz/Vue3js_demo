{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { API_PRODUCT } from '../common/contants';\nexport default {\n  name: \"ProductForm\",\n  data() {\n    return {\n      product: {\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        image: \"\"\n      },\n      errors: {\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        image: \"\"\n      }\n    };\n  },\n  created() {\n    let productId = this.$route.params.id;\n    if (productId) {\n      this.getProduct(productId);\n    } else {\n      alert(\"Product does not exist!!!\");\n    }\n  },\n  methods: {\n    vadilate() {\n      let isValid = true;\n      this.errors = {\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        image: \"\"\n      };\n      if (!this.product.image) {\n        this.errors.image = 'Product image is required';\n        isValid = false;\n      }\n      if (!this.product.name) {\n        this.errors.name = 'Product name is required';\n        isValid = false;\n      }\n      if (!this.product.description) {\n        this.errors.description = 'Product description is required';\n        isValid = false;\n      }\n      if (!this.product.price) {\n        this.errors.price = 'Product price is required';\n        isValid = false;\n      } else if (!this.isNumber(this.product.price)) {\n        this.errors.price = 'Product price must be number';\n        isValid = false;\n      }\n      return isValid;\n    },\n    isNumber(number) {\n      return !isNaN(parseFloat(number) && isFinite(number));\n    },\n    save() {\n      if (this.vadilate()) {\n        if (this.product.id) {\n          this.$request.put(API_PRODUCT + `/${this.product.id}`, this.product).then(res => {\n            if (res.data.success) {\n              this.$router.push({\n                name: 'product.list'\n              });\n              return;\n            }\n            alert('Something went wrong');\n          });\n        } else {\n          this.$request.post(API_PRODUCT, this.product).then(res => {\n            if (res.data.success) {\n              this.$router.push({\n                name: 'product.list'\n              });\n              return;\n            }\n            alert('Something went wrong');\n          });\n        }\n      }\n    },\n    getProduct(Productid) {\n      this.$request.get(API_PRODUCT + `/${Productid}`).then(result => {\n        this.product = result.data;\n      }).catch(err => {\n        alert(err);\n      });\n    },\n    cancel() {\n      this.product = {\n        name: \"\",\n        price: \"\",\n        description: \"\",\n        image: \"\"\n      };\n    }\n  }\n};","map":{"version":3,"names":["API_PRODUCT","name","data","product","price","description","image","errors","created","productId","$route","params","id","getProduct","alert","methods","vadilate","isValid","isNumber","number","isNaN","parseFloat","isFinite","save","$request","put","then","res","success","$router","push","post","Productid","get","result","catch","err","cancel"],"sources":["/home/longdh@kaopiz.local/Music/vueMiniProject/miniproject/src/views/products/Form.vue"],"sourcesContent":["<template>\n    <div class=\"product-info\">\n        <div class=\"princing-header px-3 py-3 pt-md-3 pb-md-4 mx-auto text-center\">\n            <h3 class=\"display-4\">Create New Product</h3>\n        </div>\n        <div class=\"container\">\n            <form @submit.prevent=\"save()\">\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\">Product Image</label>\n                    <div class=\"col-sm-9\">\n                        <input type=\"text\"\n                        placeholder=\"Enter url image\" \n                        class=\"form-control\" \n                        v-model=\"product.image\"\n                        @blur=\"vadilate()\" \n                        v-bind:class=\"{'is-invalid': errors.image}\"\n                        />\n                        <div class=\"invalid-feedback d-flex\" v-if=\"errors.image\">{{ errors.image }}</div>\n                    </div>\n                </div>\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\">Product Name</label>\n                    <div class=\"col-sm-9\">\n                        <input type=\"text\" \n                        placeholder=\"Enter product name\" \n                        class=\"form-control\" \n                        v-model=\"product.name\"\n                        @blur=\"vadilate()\" \n                        v-bind:class=\"{ 'is-invalid': errors.name }\"\n                        />\n                        <div class=\"invalid-feedback d-flex\" v-if=\"errors.name\">{{ errors.name }}</div>\n                    </div>\n                </div>\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\">Product Price</label>\n                    <div class=\"col-sm-9\">\n                        <input type=\"text\"\n                        class=\"form-control\" \n                        v-model=\"product.price\"\n                        @blur=\"vadilate()\" \n                        v-bind:class=\"{ 'is-invalid': errors.price }\"\n                        />\n                        <div class=\"invalid-feedback d-flex\" v-if=\"errors.price\">{{ errors.price }}</div>\n                    </div>\n                </div>\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\">Product Description</label>\n                    <div class=\"col-sm-9\">\n                        <textarea class=\"form-control\" \n                            cols=\"30\" \n                            rows=\"10\" \n                            v-model=\"product.description\"\n                            @blur=\"vadilate()\" \n                            v-bind:class=\"{ 'is-invalid': errors.description }\"\n                            >\n                        </textarea>\n                        <div class=\"invalid-feedback d-flex\" v-if=\"errors.description\">{{ errors.description }}</div>\n                    </div>\n                </div>\n                <div class=\"form-item row py-3\">\n                    <label for=\"input\" class=\"col-sm-3 col-form-label\"></label>\n                    <div class=\"col-sm-9\" >\n                        <button type=\"submit\" class=\"btn btn-primary mx-3\">Save</button>\n                        <button type=\"reset\" class=\"btn btn-danger mx-3 \" @click=\"cancel()\">Cancel</button>\n                        <button class=\"btn btn-secondary mx-3\"> \n                            <router-link to=\"/products\" class=\"text-white\">Back</router-link>\n                        </button>\n                    </div>\n                </div>\n            </form>\n            \n        </div>\n    </div>\n</template>\n<script>\nimport { API_PRODUCT } from '../common/contants'\nexport default {\n    name: \"ProductForm\",\n    data() {\n        return {\n            product: {\n                name: \"\",\n                price: \"\",\n                description: \"\",\n                image: \"\"\n            },\n            errors: {\n                name: \"\",\n                price: \"\",\n                description: \"\",\n                image: \"\"\n            }\n\n        }\n    },\n    created() {\n        let productId = this.$route.params.id\n        if (productId) {\n            this.getProduct(productId)\n        } else {\n            alert(\"Product does not exist!!!\")\n        }\n\n    },\n    methods: {\n        vadilate() {\n            let isValid = true\n            this.errors = {\n                name: \"\",\n                price: \"\",\n                description: \"\",\n                image: \"\"\n            }\n            if (!this.product.image ) {\n                this.errors.image = 'Product image is required'\n                isValid = false\n            }\n            if (!this.product.name) {\n                this.errors.name = 'Product name is required'  \n                isValid = false  \n            }\n            if (!this.product.description) {\n                this.errors.description = 'Product description is required'\n                isValid = false\n            }\n            if (!this.product.price) {\n                this.errors.price = 'Product price is required'\n                isValid = false\n                \n            } else if (!this.isNumber(this.product.price)) {\n                this.errors.price = 'Product price must be number'\n                isValid = false\n            }\n            return isValid\n        },\n        isNumber(number) {\n            return !isNaN(parseFloat(number) && isFinite(number));\n        },\n        save() {\n            if (this.vadilate()) {\n                if (this.product.id) {\n                    this.$request.put(API_PRODUCT + `/${this.product.id}`, this.product).then(\n                        res => {\n                            if (res.data.success) {\n                                this.$router.push({\n                                    name: 'product.list'\n                                })\n                                return\n                            }\n                            alert('Something went wrong')\n                        }\n                    )\n                } else {\n                    this.$request.post(API_PRODUCT, this.product).then(\n                        res => {\n                            if (res.data.success) {\n                                this.$router.push({\n                                    name: 'product.list'\n                                })\n                                return\n                            }\n                            alert('Something went wrong')\n                        }\n                    )\n                }\n            }\n        },\n        getProduct(Productid) {\n            this.$request.get(API_PRODUCT + `/${Productid}`).then((result) => {\n                this.product = result.data    \n            }).catch((err) => {\n                alert(err)\n            });\n        },\n        cancel() {\n            this.product = {\n                name: \"\",\n                price: \"\",\n                description: \"\",\n                image: \"\"\n            }\n        }\n\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}